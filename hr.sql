-- EMPLOYEESS (scott 계정의 emp 테이블 원본)
-- EMPLOYESS 전체 조회
SELECT * FROM EMPLOYEES;
-- first_namem, last_name, job_id 조회
-- 쿼리문 정렬 단축키 :ctlr + shift + f
SELECT
	first_name,
	last_name,
	job_id
FROM
	EMPLOYEES;
SELECT * FROM EMPLOYEES e ;
-- 사원 번호가 176인 사원의 LAST_NAME, 부서번호 조회
SELECT LAST_NAME, DEPARTMENT_ID FROM EMPLOYEES e WHERE EMPLOYEE_ID = 176; 

-- 연봉이 12000 이상 되는 직원들의 LAST_NAME과 연봉 조회
SELECT
	LAST_NAME,
	SALARY AS 연봉
FROM
	EMPLOYEES e
WHERE
	SALARY >=12000;

-- 연봉이 5000에서 12000 범위가 아닌 사람들의 LAST_NAME과 연봉조회
SELECT
	LAST_NAME,
	SALARY AS 연봉
FROM
	EMPLOYEES e
WHERE
	SALARY > 12000
	OR SALARY < 5000;

-- 20번 혹은 50번 부서에서 근무하는 사원들의 last_name, 부서번호를 조회
-- 단, 이름의 오름차순, 부서의 오름차순으로 정렬
SELECT LAST_NAME, e.DEPARTMENT_ID 
FROM EMPLOYEES e 
WHERE DEPARTMENT_ID IN (20,50) 
ORDER BY e.LAST_NAME , e.DEPARTMENT_ID;

-- 커미션을 버는 사원들의 last_name, salary, commission_pct를 조회
-- 단, 연봉의 내림차순, 커미션 내림차순으로 정렬
SELECT e.LAST_NAME, e.SALARY, e.COMMISSION_PCT 
FROM EMPLOYEES e 
WHERE e.COMMISSION_PCT > 0 
ORDER BY e.SALARY DESC, e.COMMISSION_PCT DESC;

-- 연봉이 2500, 3500, 7000이 아니며 job_id가 SA_PER OR ST_CLERK 인 사원조회
SELECT * 
FROM EMPLOYEES e 
WHERE e.SALARY NOT IN (2500,3500,7000) AND e.JOB_ID IN ('SA_PER', 'ST_CLERK');

-- 2018/02/20 ~ 2018/05/01 사이에 고용된 직원들의 LAST_NAME,사번,고용일자 조회
SELECT e.LAST_NAME, e.EMPLOYEE_ID, e.HIRE_DATE 
FROM EMPLOYEES e 
WHERE e.HIRE_DATE >= '2018-02-20' AND e.HIRE_DATE <= '2018-05-01';

-- 2015년도에 고용된 사원 조회
SELECT *
FROM EMPLOYEES e 
WHERE e.HIRE_DATE >= '2015-01-01' AND e.HIRE_DATE <= '2015-12-31';


-- BETWEEN A AND B
-- 20번 혹은 50번 부서에서 근무하며 연봉이 5000이상 12000이하인 직원들의 
-- FIRST_NAME, LAST_NAME, 연봉 조회 (연봉 오름차순)
SELECT e.FIRST_NAME, e.LAST_NAME , e.SALARY 
FROM EMPLOYEES e 
WHERE e.DEPARTMENT_ID IN (20,50) AND e.SALARY BETWEEN 5000 AND 12000
ORDER BY e.SALARY;
-- 연봉이 5000~12000이 아닌 직원들의 정보 조회
SELECT *
FROM EMPLOYEES e 
WHERE e.SALARY NOT BETWEEN 5000 AND 12000;
-- 2018/02/20 ~ 2018/05/01 사이에 고용된 직원들의 LAST_NAME,사번,고용일자 조회
SELECT e.LAST_NAME, e.EMPLOYEE_ID, e.HIRE_DATE 
FROM EMPLOYEES e 
WHERE e.HIRE_DATE BETWEEN '2018-02-20' AND '2018-05-01';
-- 2015년도에 고용된 사원 조회
SELECT *
FROM EMPLOYEES e 
WHERE e.HIRE_DATE BETWEEN '2015-01-01' AND  '2015-12-31';

-- LIKE
-- LAST_NAME 에 u가 포함되는 사원들의 사번, LAST_NAME 조회
SELECT e.EMPLOYEE_ID , e.LAST_NAME 
FROM EMPLOYEES e 
WHERE e.LAST_NAME LIKE '%u%';

-- LAST_NAME 의 4번째 글자가 a인 사원들의 사번, LAST_NAME 조회(LAST_NAME 오름차순)
SELECT e.EMPLOYEE_ID , e.LAST_NAME 
FROM EMPLOYEES e 
WHERE e.LAST_NAME LIKE '____a%'
ORDER BY e.LAST_NAME;

-- LAST_NAME 의 a 혹은 e 글자가 포함되는 사원들의 사번, LAST_NAME 조회(LAST_NAME 오름차순)
SELECT e.EMPLOYEE_ID , e.LAST_NAME 
FROM EMPLOYEES e 
WHERE e.LAST_NAME LIKE '%a%' OR e.LAST_NAME LIKE '%e%'
ORDER BY e.LAST_NAME;

-- LAST_NAME 의 a 와 e 글자가 포함되는 사원들의 사번, LAST_NAME 조회(LAST_NAME 오름차순)
SELECT e.EMPLOYEE_ID , e.LAST_NAME 
FROM EMPLOYEES e 
WHERE e.LAST_NAME LIKE '%a%e%' OR e.LAST_NAME LIKE '%e%a%'
ORDER BY e.LAST_NAME;

SELECT e.EMPLOYEE_ID , e.LAST_NAME 
FROM EMPLOYEES e 
WHERE e.LAST_NAME LIKE '%a%' AND e.LAST_NAME LIKE '%e%'
ORDER BY e.LAST_NAME;

-- IS NULL
-- MANAGER_ID가 없는 사원들의 LAST_NAME 및 JOB_ID 조회
SELECT e.LAST_NAME , e.JOB_ID 
FROM EMPLOYEES e 
WHERE e.MANAGER_ID IS NULL;

-- JOB_ID가 ST_CLERK가 아닌 사원이 있는 부서 조회
-- 단, 부서번호가 NULL인 경우는 제외한다.
SELECT DISTINCT e.DEPARTMENT_ID -- DISTINCT 중복 제거
FROM EMPLOYEES e 
WHERE e.JOB_ID != 'ST_CLERK' AND e.DEPARTMENT_ID IS NOT NULL;


-- COMMISSION_PCT가 NULL이 아닌 사원들 중에서 COMMISION = SALARY * COMMISSION_PCT를 구한다
-- 사원 번호, FIRST_NAME, JOB_ID와 함께 조회
SELECT e.EMPLOYEE_ID , e.FIRST_NAME , e.JOB_ID , SALARY * E.COMMISSION_PCT AS COMMISSION 
FROM EMPLOYEES e 
WHERE e.COMMISSION_PCT IS NOT NULL;

-- 부서 80의 사원에 적용 가능한 세율 표시하기
-- LAST_NAME, SALARY, TAX_RATE 출력
-- TAX_RATE 는 SALARY/2000 으로 나눈 후 버림
-- 해당 값이 0이면 0.0/ 1, 0.09/ 2, 0.20/ 3, 0.30/4, 0.40/ 5, 0.42/ 6, 0.44/ 그 외 0.45
SELECT
	E.LAST_NAME, 
	SALARY, 
	DECODE(
		TRUNC( SALARY / 2000 ),
		0, 0.0,
		1, 0.9,
		2, 0.20,
		3, 0.30,
		4, 0.40,
		5, 0.42,
		6, 0.44,
		0.45) AS TAX_RATE
FROM
	EMPLOYEES e ;

-- 회사 내의 최대 연봉 및 최소 연봉의 차이를 출력
SELECT MAX(SALARY) - MIN(SALARY) AS SAL_GAP
FROM EMPLOYEES e ;
-- MANAGER로 근무하는 사원들의 총 숫자를 출력
SELECT COUNT(DISTINCT MANAGER_ID) AS 매니저수
FROM EMPLOYEES e;
-- MANAGER가 없는 사원들은 제외하고 각 매니저가 관리하는 사원들 중에서 최소 급여를 받는 사원들 조회
-- (매니저가 관리하는 사원 중에서 연봉이 6000미만은 제외)
SELECT MANAGER_ID, MIN(SALARY) 
FROM EMPLOYEES e
GROUP BY MANAGER_ID 
HAVING MANAGER_ID IS NOT NULL AND MIN(SALARY) >= 6000 
ORDER BY MANAGER_ID;





























